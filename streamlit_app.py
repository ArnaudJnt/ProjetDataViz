import streamlit as st
import pandas as pd
import plotly.express as px
import streamlit as st            
import pandas as pd               
import folium                     
from folium.plugins import MarkerCluster  
from streamlit_folium import st_folium    
import seaborn as sns
import matplotlib.pyplot as plt
import geopandas as gpd
from wordcloud import WordCloud
import matplotlib.pyplot as plt

st.title("Accidents de la route en 2023")

st.markdown("""
Les donn√©es utilis√©es proviennent de **l'INSEE** et concernent les **accidents de la route en France en 2023**. Elles sont organis√©es de la fa√ßon suivante :

### üìÇ Caract√©ristiques (caract-2023.csv)
- Ce fichier contient des informations g√©n√©rales sur chaque accident, telles que :
    - **Date** et **heure** de l'accident,
    - **Conditions de luminosit√©** (lum),
    - **Conditions atmosph√©riques** (atm),
    - **Type de collision** (col).
- Ces donn√©es permettent de comprendre le contexte global dans lequel chaque accident s‚Äôest produit.

### üåç Lieux (lieux-2023.csv)
- Ce fichier d√©crit les caract√©ristiques du lieu de l‚Äôaccident :
    - **Cat√©gorie de route** (catr),
    - **Profil de la route** (prof),
    - **√âtat de la surface** (surf),
    - **Localisation pr√©cise de l‚Äôaccident** (situ).
- Ces informations sont essentielles pour analyser l‚Äôinfluence de l‚Äôenvironnement sur les accidents.

### üöó V√©hicules (vehicules-2023.csv)
- Ce fichier recense les informations sur les v√©hicules impliqu√©s dans chaque accident :
    - **Cat√©gorie du v√©hicule** (catv),
    - **Point initial du choc** (choc),
    - **Man≈ìuvre r√©alis√©e avant l‚Äôaccident** (manv).

### üë• Usagers (usagers-2023.csv)
- Ce fichier contient des informations sur les usagers impliqu√©s dans les accidents, incluant :
    - Leur **position dans le v√©hicule** (place),
    - Leur **cat√©gorie** (catu),
    - Leur **gravit√©** (grav),
    - Leur **sexe** (sexe).
""")

# Sommaire interactif
st.sidebar.title("Sommaire")
st.sidebar.markdown("""
- [üè† Introduction](#introduction)
- [üìÇ Chargement des Donn√©es](#chargement-des-donn√©es)
- [üìù Description des Variables](#description-des-variables)
- [üåç Carte Interactive](#carte-interactive)
    - [France](#carte-√Æle-de-france)
    - [√éle-de-France](#carte-√Æle-de-france)
- [üîç Analyse Bivari√©e](#analyse-bivari√©e)
- [üìä √âvolution Temporelle des Accidents](#evolution-temporelle)
- [üìà Machine Learning](#analyse-bivari√©e)
""")

st.markdown("## üè† Introduction")
st.markdown("""
Les donn√©es utilis√©es proviennent de **l'INSEE** et concernent les **accidents de la route en France en 2023**. Elles sont organis√©es de la fa√ßon suivante :

### üìÇ Caract√©ristiques (caract-2023.csv)
- Ce fichier contient des informations g√©n√©rales sur chaque accident, telles que :
    - **Date** et **heure** de l'accident,
    - **Conditions de luminosit√©** (lum),
    - **Conditions atmosph√©riques** (atm),
    - **Type de collision** (col).
- Ces donn√©es permettent de comprendre le contexte global dans lequel chaque accident s‚Äôest produit.

### üåç Lieux (lieux-2023.csv)
- Ce fichier d√©crit les caract√©ristiques du lieu de l‚Äôaccident :
    - **Cat√©gorie de route** (catr),
    - **Profil de la route** (prof),
    - **√âtat de la surface** (surf),
    - **Localisation pr√©cise de l‚Äôaccident** (situ).
- Ces informations sont essentielles pour analyser l‚Äôinfluence de l‚Äôenvironnement sur les accidents.

### üöó V√©hicules (vehicules-2023.csv)
- Ce fichier recense les informations sur les v√©hicules impliqu√©s dans chaque accident :
    - **Cat√©gorie du v√©hicule** (catv),
    - **Point initial du choc** (choc),
    - **Man≈ìuvre r√©alis√©e avant l‚Äôaccident** (manv).

### üë• Usagers (usagers-2023.csv)
- Ce fichier contient des informations sur les usagers impliqu√©s dans les accidents, incluant :
    - Leur **position dans le v√©hicule** (place),
    - Leur **cat√©gorie** (catu),
    - Leur **gravit√©** (grav),
    - Leur **sexe** (sexe).
""")


## Chargement des donn√©es
st.markdown("## üìÇ Chargement des Donn√©es")
# Utiliser le cache pour optimiser les performances lors du chargement des fichiers
@st.cache_data
def load_data(file_path):
    """Charge un fichier CSV donn√©."""
    try:
        return pd.read_csv(file_path, sep=';', decimal=',')
    except FileNotFoundError:
        st.error(f"Le fichier {file_path} est introuvable.")
        return None

# D√©finir les chemins relatifs vers les fichiers
caract_file_path = "data/caract-2023.csv"
lieux_file_path = "data/lieux-2023.csv"
vehicules_file_path = "data/vehicules-2023.csv"
usagers_file_path = "data/usagers-2023.csv"

caract_df = load_data(caract_file_path)
lieux_df = load_data(lieux_file_path)
vehicules_df = load_data(vehicules_file_path)
usagers_df = load_data(usagers_file_path)

# V√©rifier que tous les fichiers ont √©t√© charg√©s
if caract_df is not None and lieux_df is not None and vehicules_df is not None and usagers_df is not None:
    ## Fusion des bases de donn√©es
    merged_df = caract_df.merge(lieux_df, on='Num_Acc')
    merged_df = merged_df.merge(vehicules_df, on='Num_Acc')
    merged_df = merged_df.merge(usagers_df, on='Num_Acc')

    # Supprimer les doublons
    merged_df = merged_df.drop_duplicates()

    # D√©finir les codes des v√©hicules motoris√©s
    codes_motorises = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]

    # Filtrer les donn√©es pour conserver uniquement les v√©hicules motoris√©s
    accidents_motorises = merged_df[merged_df['catv'].isin(codes_motorises)]

    # Conversion des colonnes en types num√©riques
    accidents_motorises['lat'] = pd.to_numeric(accidents_motorises['lat'], errors='coerce')
    accidents_motorises['long'] = pd.to_numeric(accidents_motorises['long'], errors='coerce')
    accidents_motorises['dep'] = pd.to_numeric(accidents_motorises['dep'], errors='coerce')
    accidents_motorises['com'] = pd.to_numeric(accidents_motorises['com'], errors='coerce')

    # Affichage des donn√©es fusionn√©es
    st.write("Aper√ßu de la base de donn√©es‚ÄØ:")
    st.dataframe(merged_df.head())

else:
    st.error("Un ou plusieurs fichiers n'ont pas pu √™tre charg√©s. V√©rifiez leur emplacement ou leur contenu.")


st.markdown("## üìù Description des Variables")
# Dictionnaire contenant les descriptions des variables pour chaque fichier
descriptions = {
    "Caract√©ristiques (caract-2023.csv)": {
        "Num_Acc": "Identifiant unique de l'accident.",
        "an": "Ann√©e de l'accident.",
        "mois": "Mois de l'accident.",
        "jour": "Jour de l'accident.",
        "hrmn": "Heure et minute de l'accident (exemple : '13h45').",
        "lum": "Conditions de luminosit√© :\n"
               "1 : Plein jour.\n"
               "2 : Cr√©puscule ou aube.\n"
               "3 : Nuit sans √©clairage.\n"
               "4 : Nuit avec √©clairage non allum√©.\n"
               "5 : Nuit avec √©clairage allum√©.",
        "agg": "L'accident a-t-il eu lieu en agglom√©ration ?\n"
               "1 : Oui.\n"
               "2 : Non.",
        "int": "Type d'intersection :\n"
               "1 : Hors intersection.\n"
               "2 : Intersection en X.\n"
               "3 : Intersection en T.\n"
               "4 : Intersection en Y.\n"
               "5 : Rond-point.\n"
               "6 : Place.\n"
               "7 : Autre intersection.",
        "atm": "Conditions atmosph√©riques :\n"
               "1 : Normales.\n"
               "2 : Pluie l√©g√®re.\n"
               "3 : Pluie forte.\n"
               "4 : Neige ou gr√™le.\n"
               "5 : Brouillard ou fum√©e.\n"
               "6 : Vent fort ou temp√™te.\n"
               "7 : Temps √©blouissant.\n"
               "8 : Temps couvert.\n"
               "9 : Autres.",
        "col": "Type de collision :\n"
               "1 : Deux v√©hicules - frontale.\n"
               "2 : Deux v√©hicules - par l'arri√®re.\n"
               "3 : Deux v√©hicules - par le c√¥t√©.\n"
               "4 : Trois v√©hicules ou plus - en cha√Æne.\n"
               "5 : Trois v√©hicules ou plus - collisions multiples.\n"
               "6 : Autre collision.",
        "dep": "D√©partement o√π l'accident a eu lieu.",
        "com": "Commune o√π l'accident a eu lieu.",
        "adr": "Adresse approximative de l'accident."
    },
    "Lieux (lieux-2023.csv)": {
        "Num_Acc": "Identifiant unique de l'accident.",
        "catr": "Cat√©gorie de route :\n"
                "1 : Autoroute.\n"
                "2 : Route nationale.\n"
                "3 : Route d√©partementale.\n"
                "4 : Voie communale.\n"
                "5 : Hors r√©seau public.\n"
                "6 : Parking.\n"
                "7 : Autres.",
        "voie": "Num√©ro de voie.",
        "v1": "Num√©ro de l'indice de lieu (pr√©cision g√©ographique).",
        "v2": "Num√©ro de l'indice de lieu (pr√©cision g√©ographique).",
        "circ": "R√©gime de circulation :\n"
                "1 : √Ä sens unique.\n"
                "2 : Bidirectionnelle.\n"
                "3 : Avec voies sp√©cialis√©es.",
        "nbv": "Nombre de voies.",
        "prof": "Profil de la route :\n"
                "1 : Plat.\n"
                "2 : Pente.\n"
                "3 : Sommet de c√¥te.\n"
                "4 : Bas de c√¥te.",
        "plan": "Trac√© en plan :\n"
                "1 : Rectiligne.\n"
                "2 : En courbe √† gauche.\n"
                "3 : En courbe √† droite.\n"
                "4 : En S.",
        "surf": "√âtat de la surface :\n"
                "1 : Normale.\n"
                "2 : Mouill√©e.\n"
                "3 : En flaques.\n"
                "4 : Verglac√©e.\n"
                "5 : Boue.\n"
                "6 : Neige.\n"
                "7 : Sable ou gravillons.\n"
                "8 : Huile.\n"
                "9 : Autres.",
        "infra": "Pr√©sence d'infrastructure particuli√®re :\n"
                 "0 : Aucune.\n"
                 "1 : Souterrain.\n"
                 "2 : Pont.\n"
                 "3 : Bretelle.\n"
                 "4 : Voie ferr√©e.\n"
                 "5 : Carrefour am√©nag√©.\n"
                 "6 : Zone pi√©tonne.\n"
                 "7 : Zone de p√©age.",
        "situ": "Localisation de l'accident :\n"
                "1 : Sur chauss√©e.\n"
                "2 : Sur bande d'arr√™t d'urgence.\n"
                "3 : Sur accotement.\n"
                "4 : Sur trottoir.\n"
                "5 : Sur piste cyclable."
    },
    "V√©hicules (vehicules-2023.csv)": {
        "Num_Acc": "Identifiant unique de l'accident.",
        "id_vehicule": "Identifiant unique du v√©hicule.",
        "catv": "Cat√©gorie du v√©hicule :\n"
                "1 : V√©lo.\n"
                "2 : Cyclomoteur.\n"
                "3 : Moto < 50 cm¬≥.\n"
                "4 : Moto > 50 cm¬≥.\n"
                "5 : VL seul.\n"
                "6 : VL + remorque.\n"
                "7 : VU seul.\n"
                "8 : VU + remorque.\n"
                "9 : PL seul 3,5T < PTAC < 7,5T.\n"
                "10 : PL > 7,5T.\n"
                "11 : Bus.\n"
                "12 : Tramway.\n"
                "13 : Train.\n"
                "14 : Engin sp√©cial.\n"
                "15 : Autre.",
        "obs": "Obstacle fixe heurt√©.",
        "obsm": "Obstacle mobile heurt√©.",
        "choc": "Point initial du choc :\n"
                "1 : Avant.\n"
                "2 : Avant droit.\n"
                "3 : Avant gauche.\n"
                "4 : Arri√®re.\n"
                "5 : Arri√®re droit.\n"
                "6 : Arri√®re gauche.",
        "manv": "Man≈ìuvre principale avant l'accident."
    },
    "Usagers (usagers-2023.csv)": {
        "Num_Acc": "Identifiant unique de l'accident.",
        "id_vehicule": "Identifiant unique du v√©hicule associ√©.",
        "place": "Position dans le v√©hicule (conducteur, passager, etc.).",
        "catu": "Cat√©gorie d'usager :\n"
                "1 : Conducteur.\n"
                "2 : Passager.\n"
                "3 : Pi√©ton.",
        "grav": "Gravit√© de l'accident pour la personne :\n"
                "1 : Indemne.\n"
                "2 : Bless√© l√©ger.\n"
                "3 : Bless√© hospitalis√©.\n"
                "4 : Tu√©.",
        "sexe": "Sexe de l'usager :\n"
                "1 : Masculin.\n"
                "2 : F√©minin.",
        "trajet": "Raison du d√©placement :\n"
                  "1 : Domicile-travail.\n"
                  "2 : Domicile-√©cole.\n"
                  "3 : D√©placement professionnel.\n"
                  "4 : Loisirs.\n"
                  "5 : Autres.",
        "secu": "Utilisation des √©quipements de s√©curit√© (ceinture, casque, etc.)."
    }
}

# Interface utilisateur

# S√©lection du fichier
file_choice = st.selectbox(
    "Choisissez un fichier pour voir toutes ses variables :",
    options=list(descriptions.keys()),
    index=0
)

# Afficher les descriptions
if file_choice:
    st.subheader(f"Descriptions des variables pour : {file_choice}")
    for variable, description in descriptions[file_choice].items():
        st.markdown(f"**{variable}** : {description}")


st.markdown("## üåç Carte Interactive")
st.markdown("### Carte de France")

# Ajout de la description de la gravit√©
gravite_dict = {
    1: "Bless√© l√©ger",
    2: "Indemne",
    3: "Bless√© hospitalis√©",
    4: "Tu√©"
}
accidents_motorises['grav_desc'] = accidents_motorises['grav'].map(gravite_dict)

# Filtrage des lignes avec des valeurs valides
accidents_motorises = accidents_motorises.dropna(subset=['lat', 'long', 'grav_desc'])

# Cr√©ation de la carte
fig = px.scatter_mapbox(
    accidents_motorises,
    lat='lat',
    lon='long',
    color='grav_desc',
    color_discrete_map={
        "Indemne": "#0080ff",
        "Bless√© l√©ger": "#ffff66",
        "Bless√© hospitalis√©": "#ff9933",
        "Tu√©": "#ff3300"
    },
    title="R√©partition g√©ographique des accidents motoris√©s par gravit√©",
    mapbox_style="open-street-map",
    zoom=12,
    height=800,
    hover_name='grav_desc'
)

fig.update_layout(legend_title="Gravit√©")

# Affichage de la carte dans Streamlit
st.plotly_chart(fig, use_container_width=True)

# Liste des d√©partements d'√éle-de-France
idf_departments = {
    75: "Paris",
    77: "Seine-et-Marne",
    78: "Yvelines",
    91: "Essonne",
    92: "Hauts-de-Seine",
    93: "Seine-Saint-Denis",
    94: "Val-de-Marne",
    95: "Val-d'Oise"
}

# Interface utilisateur
st.markdown("### Carte √éle-de-France")

# Menu pour s√©lectionner un d√©partement
selected_dep = st.selectbox(
    "Choisissez un d√©partement :",
    options=list(idf_departments.keys()),
    format_func=lambda x: f"{idf_departments[x]} ({x})"
)

# Filtrer les donn√©es pour le d√©partement s√©lectionn√©
filtered_data = accidents_motorises[accidents_motorises["dep"] == selected_dep]

# Fonction pour g√©n√©rer la carte (cach√©e pour √©viter le recalcul)
@st.cache_data
def create_map(filtered_data):
    # Initialiser une carte centr√©e sur le d√©partement s√©lectionn√©
    m = folium.Map(
        location=[filtered_data["lat"].mean(), filtered_data["long"].mean()],
        zoom_start=10
    )

    # Ajouter des marqueurs pour les accidents
    for _, row in filtered_data.iterrows():
        folium.CircleMarker(
            location=[row["lat"], row["long"]],
            radius=6,
            color="red" if row["grav"] == 4 else "orange" if row["grav"] == 3 else "blue",
            fill=True,
            fill_opacity=0.7,
            popup=f"Gravit√© : {row['grav']}"
        ).add_to(m)
    return m

# Cr√©er la carte uniquement si des donn√©es existent
if not filtered_data.empty:
    accident_map = create_map(filtered_data)
    st_folium(accident_map, width=800, height=500)
else:
    st.warning("Aucune donn√©e disponible pour le d√©partement s√©lectionn√©.")


# Ajouter une description de la gravit√©
gravite_dict = {
    1: "Indemne",
    2: "Bless√© l√©ger",
    3: "Bless√© hospitalis√©",
    4: "Tu√©"
}
accidents_motorises['grav_desc'] = accidents_motorises['grav'].map(gravite_dict)

# Liste des d√©partements d'√éle-de-France
idf_departments = [75, 77, 78, 91, 92, 93, 94, 95]

# Filtrer uniquement les d√©partements d'√éle-de-France
accidents_motorises_idf = accidents_motorises[accidents_motorises['dep'].isin(idf_departments)]

# Ajouter une colonne pour les plages horaires
def categorize_time(hour):
    if 6 <= hour < 12:
        return "Matin (6h-12h)"
    elif 12 <= hour < 18:
        return "Apr√®s-midi (12h-18h)"
    else:
        return "Soir (18h-6h)"
accidents_motorises_idf['heure'] = accidents_motorises_idf['hrmn'].str.split(':').str[0].astype(int)
accidents_motorises_idf['plage_horaire'] = accidents_motorises_idf['heure'].apply(categorize_time)

# Ajouter une colonne avec les jours de la semaine
accidents_motorises_idf['jour_semaine_en'] = pd.to_datetime(
    accidents_motorises_idf[['an', 'mois', 'jour']].rename(columns={'an': 'year', 'mois': 'month', 'jour': 'day'})
).dt.day_name()

# Traduire les jours de la semaine en fran√ßais
jours_traduction = {
    "Monday": "lundi",
    "Tuesday": "mardi",
    "Wednesday": "mercredi",
    "Thursday": "jeudi",
    "Friday": "vendredi",
    "Saturday": "samedi",
    "Sunday": "dimanche"
}
accidents_motorises_idf['jour_semaine'] = accidents_motorises_idf['jour_semaine_en'].map(jours_traduction)


# Variables disponibles pour l'analyse
variables_disponibles = {
    "plage_horaire": "Plage Horaire",
    "catv": "Cat√©gorie de V√©hicules",
    "dep": "D√©partement",
    "jour_semaine": "Jour de la Semaine"
}
st.markdown("## üîç Analyse Bivari√©e")
# Choix de la variable
variable_choisie = st.selectbox(
    "Choisissez une variable pour analyser la gravit√© des accidents :",
    options=list(variables_disponibles.keys()),
    format_func=lambda x: variables_disponibles[x]
)

# Analyse dynamique
if variable_choisie in ["plage_horaire", "catv", "dep"]:
    # Cr√©er une table de fr√©quence pour la heatmap
    heatmap_data = pd.crosstab(
        accidents_motorises_idf[variable_choisie],
        accidents_motorises_idf['grav_desc'],
        normalize='index'
    )

    # Trier les plages horaires si la variable choisie est "plage_horaire"
    if variable_choisie == "plage_horaire":
        heatmap_data = heatmap_data.reindex(["Matin (6h-12h)", "Apr√®s-midi (12h-18h)", "Soir (18h-6h)"])

    # Si l'utilisateur choisit "dep", afficher les noms des d√©partements
    if variable_choisie == "dep":
        heatmap_data.index = heatmap_data.index.map({
            75: "Paris",
            77: "Seine-et-Marne",
            78: "Yvelines",
            91: "Essonne",
            92: "Hauts-de-Seine",
            93: "Seine-Saint-Denis",
            94: "Val-de-Marne",
            95: "Val-d'Oise"
        })

    # Affichage de la heatmap
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(
        heatmap_data,
        annot=True,
        fmt=".2f",
        cmap="YlOrRd",
        cbar_kws={'label': 'Proportion'},
        linewidths=0.5,
        ax=ax
    )
    ax.set_title(f"R√©partition des Accidents par Gravit√© et {variables_disponibles[variable_choisie]}", fontsize=14)
    ax.set_xlabel("Gravit√©", fontsize=12)
    ax.set_ylabel(variables_disponibles[variable_choisie], fontsize=12)
    plt.xticks(fontsize=10, rotation=45)
    plt.yticks(fontsize=10)
    st.pyplot(fig)

elif variable_choisie == "jour_semaine":
    # R√©organiser les jours dans l'ordre fran√ßais
    jours_ordre = ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"]

    # Pr√©parer les donn√©es pour le graphique empil√©
    stacked_data = pd.crosstab(
        accidents_motorises_idf['jour_semaine'],
        accidents_motorises_idf['grav_desc']
    )
    stacked_data = stacked_data.reindex(jours_ordre)  # R√©organiser les jours

    # Palette de couleurs
    colors = ["#ffcc66", "#ff9966", "#FFFF00", "#ff3333"]

    # Graphique empil√©
    st.subheader("Distribution des Accidents par Jour de la Semaine")
    fig, ax = plt.subplots(figsize=(12, 6))
    stacked_data.plot(
        kind='bar',
        stacked=True,
        figsize=(12, 6),
        color=colors,
        ax=ax
    )

    # Personnaliser le graphique
    ax.set_title("Distribution des Accidents par Jour de la Semaine", fontsize=16, fontweight='bold')
    ax.set_xlabel("Jour de la Semaine", fontsize=14)
    ax.set_ylabel("Nombre d'Accidents", fontsize=14)
    ax.legend(
        title="Gravit√©",
        fontsize=12,
        title_fontsize=14,
        loc='upper left',
        bbox_to_anchor=(1.05, 1)
    )
    plt.xticks(fontsize=12, rotation=45)
    plt.yticks(fontsize=12)
    st.pyplot(fig)

# Evolution temporelle des accidents
st.markdown("## üìä √âvolution Temporelle des Accidents")

# Pr√©parer les donn√©es temporelles
time_analysis = accidents_motorises.groupby(['mois', 'jour']).size().reset_index(name='count')
time_analysis['date'] = pd.to_datetime(
    {'year': 2023, 'month': time_analysis['mois'], 'day': time_analysis['jour']}
)

# Trier les donn√©es par date
time_analysis = time_analysis.sort_values('date')

# Cr√©er le graphique avec Plotly
fig = px.line(
    time_analysis,
    x='date',
    y='count',
    title="√âvolution temporelle des accidents en 2023",
    labels={'date': 'Date', 'count': "Nombre d'accidents"},
    markers=True,  # Ajouter des marqueurs
    line_shape='spline',  # Lissage de la courbe
    color_discrete_sequence=["#FF5733"]  # Couleur vibrante
)


# Mettre √† jour le design du graphique
fig.update_layout(
    title=dict(
        text="√âvolution temporelle des accidents en 2023",
        font=dict(size=20, color="#333", family="Arial")
    ),
    xaxis=dict(
        title="Date",
        showgrid=True,
        gridcolor="rgba(200,200,200,0.3)",
        tickformat="%b %d",  # Afficher le mois et le jour
        tickangle=-45
    ),
    yaxis=dict(
        title="Nombre d'accidents",
        showgrid=True,
        gridcolor="rgba(200,200,200,0.3)"
    ),
    plot_bgcolor="white",  # Arri√®re-plan blanc
    margin=dict(l=50, r=50, t=80, b=50),
    hovermode="x unified"  # Info survol unifi√©e
)

# Afficher le graphique
st.plotly_chart(fig, use_container_width=True)


st.markdown("### ‚òÅÔ∏è Nuage de mots : Analyse des D√©partements")

# V√©rifier qu'il y a des donn√©es dans la colonne 'dep'
if not accidents_motorises['dep'].isna().all():
    # Remplacer les codes des d√©partements par leur nom
    department_names = {
        75: "Paris",
        77: "Seine-et-Marne",
        78: "Yvelines",
        91: "Essonne",
        92: "Hauts-de-Seine",
        93: "Seine-Saint-Denis",
        94: "Val-de-Marne",
        95: "Val-d'Oise"
    }
    accidents_motorises['dep_name'] = accidents_motorises['dep'].map(department_names)

    # Supprimer les d√©partements non inclus dans le mapping
    accidents_motorises = accidents_motorises.dropna(subset=['dep_name'])

    # Compter les occurrences de chaque d√©partement
    dep_counts = accidents_motorises['dep_name'].value_counts()

    # Cr√©er une cha√Æne de texte pond√©r√©e pour le Word Cloud
    text_data = " ".join([f"{dep} " * count for dep, count in dep_counts.items()])

    # Cr√©er le Word Cloud
    wordcloud = WordCloud(
        width=800,
        height=400,
        background_color="white",
        colormap="plasma",
        max_words=100,
        contour_color="black"
    ).generate(text_data)

    # Afficher le Word Cloud
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.imshow(wordcloud, interpolation="bilinear")
    ax.axis("off")  # Pas de bordure
    ax.set_title("Nuage de mots des d√©partements d'Ile de France les plus accident√©s", fontsize=16, fontweight="bold")
    st.pyplot(fig)
else:
    st.warning("Pas de donn√©es suffisantes pour cr√©er un nuage de mots des d√©partements.")



st.markdown("## üìà Machine Learning")
